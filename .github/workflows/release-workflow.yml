name: Release Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  verify-source-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Verify push came from dev branch
        run: |
          # Get the commit before the merge into main
          LAST_MERGE_COMMIT=$(git log --merges -n 1 --pretty=format:"%H")
          
          if [ -z "$LAST_MERGE_COMMIT" ]; then
            echo "ERROR: Direct push to main detected. Please use a pull request from dev branch instead."
            exit 1
          fi
          
          # Get the branches that were merged
          MERGE_PARENTS=$(git show --no-patch --format="%P" $LAST_MERGE_COMMIT)
          PARENT_BRANCHES=""
          
          for parent in $MERGE_PARENTS; do
            branch=$(git name-rev --name-only $parent)
            PARENT_BRANCHES="$PARENT_BRANCHES $branch"
          done
          
          if [[ ! $PARENT_BRANCHES == *"dev"* ]]; then
            echo "ERROR: Last merge was not from dev branch"
            echo "Source branches: $PARENT_BRANCHES"
            exit 1
          fi
          
          echo "Verified merge from dev branch"
  
  release:
    needs: verify-source-branch
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test with pytest
        run: |
          pytest

      - name: Get latest tag
        id: get_latest_tag
        run: |
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          echo "LATEST_TAG=$latest_tag" >> "$GITHUB_ENV"

      - name: Bump version
        id: bump_version
        run: |
          latest_version=${LATEST_TAG#v}
          IFS='.' read -r major minor patch <<< "$latest_version"
          new_version="v$major.$minor.$((patch + 1))"
          echo "NEW_VERSION=$new_version" >> "$GITHUB_ENV"
          echo "New version will be: $new_version"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: Release ${{ env.NEW_VERSION }}
          body: |
            Release from dev branch to main
            
            Changes in this release:
            ${{ github.event.head_commit.message }}
          draft: false
          prerelease: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            laffin/cloudproxy:latest
            laffin/cloudproxy:${{ env.NEW_VERSION }} 